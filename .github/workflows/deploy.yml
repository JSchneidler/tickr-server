name: ECS Deploy

on:
  workflow_run:
    workflows: ["Test"]
    branches: main
    types:
      - completed

env:
  ECR_REPOSITORY: tickr
  ECS_SERVICE: tickr-api
  ECS_CLUSTER: tickr-api
  ECS_TASK_DEFINITION: arn:aws:ecs:us-east-1:584676595568:task-definition/tickr-api:1
  CONTAINER_NAME: app

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success'}}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::584676595568:role/github-actions-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> "$GITHUB_OUTPUT"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-arn: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            DATABASE_URL=${{vars.DATABASE_URL}}
            JWT_SECRET=${{secrets.JWT_SECRET}}
            COINGECKO_API_KEY=${{secrets.COINGECKO_API_KEY}}
            FINNHUB_API_KEY=${{secrets.FINNHUB_API_KEY}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
